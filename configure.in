dnl Process this file with autoconf to produce a configure script.

AC_INIT(include/avfs.h)
AC_CONFIG_HEADER(include/config.h:config.h.in)
AC_PREFIX_DEFAULT(/usr)

dnl Check if on the same host if reconfiguring

AC_CANONICAL_HOST

AC_MSG_CHECKING([if configuration is valid])
AC_CACHE_VAL(szm_cv_host_system, [szm_cv_host_system=$host])
if test "$host" = "$szm_cv_host_system"; then
  validstring="valid"
else
  validstring="invalid"
fi
AC_MSG_RESULT([$validstring])
if test "$validstring" = invalid; then
  AC_MSG_ERROR([type 'make realclean' before running configure])
fi

os=`uname -s`

AC_MSG_CHECKING([whether to build preload or avfscoda])
if test "$os" = "SunOS"; then
    preload=yes
else
    preload=no
fi

AC_ARG_ENABLE(preload,
[  --enable-preload        Compile the preloaded library and server
  --disable-preload       Compile avfscoda (which uses the coda interface)],
[if test "$enableval" = yes; then preload=yes; else preload=no; fi])

if test "$preload" = yes; then
   AC_MSG_RESULT([preload])
   avfscoda_build=no
   preload_build=yes
else
   AC_MSG_RESULT([avfscoda])
   avfscoda_build=yes
   preload_build=no
fi

AC_MSG_CHECKING([whether debugging is enabled])
AC_ARG_ENABLE(debug,
[  --enable-debug          Compile in debug information
  --disable-debug         Do not compile in debug information],
[if test "$enableval" = yes; then debug=yes; else debug=no; fi],
debug=yes)
AC_MSG_RESULT([$debug])

AC_MSG_CHECKING([whether building the dav module is enabled])
AC_ARG_ENABLE(dav,
[  --enable-dav            Compile the dav module (needs an xml library)
  --disable-dav           Do not compile the dav module],
[if test "$enableval" = yes; then dav=yes; else dav=no; fi],
dav=yes)
AC_MSG_RESULT([$dav])

dnl Checks for programs.
cflags="$CFLAGS"
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_SYS_LARGEFILE


if test "x$ac_cv_sys_file_offset_bits" != x -a "$ac_cv_sys_file_offset_bits" != no; then
  CPPFLAGS="$CPPFLAGS -D_FILE_OFFSET_BITS=$ac_cv_sys_file_offset_bits"
fi
if test "x$ac_cv_sys_large_files" != x -a "$ac_cv_sys_large_files" != no; then
  CPPFLAGS="$CPPFLAGS -D_LARGE_FILES=$ac_cv_sys_large_files"
fi

if test -z "$cflags"; then
   if test "$GCC" = yes; then
      if test "$debug" = yes; then
         CFLAGS="-Wall -g"
      else 
         CFLAGS="-Wall -O3"
      fi
      ZLIB_CFLAGS="-Wall -O3"
   else
      if test "$debug" = yes; then
         CFLAGS="-g"
      else
         CFLAGS="-O"
      fi
      ZLIB_CFLAGS="-O"
   fi
fi

AC_SUBST(ZLIB_CFLAGS)

CPPFLAGS="$CPPFLAGS -D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS"

if test -z "$LD"; then
	AC_CHECK_PROG(LD, ld, [ld -r], [$CC -Wl,-r -nostdlib])
else
	LD="$LD -r"
	AC_SUBST(LD)
fi

AC_CHECK_FUNCS(vsnprintf strncasecmp strcasecmp mkdtemp)
AC_HEADER_MAJOR

dnl For zlib
AC_CHECK_HEADERS(unistd.h)

AC_CACHE_CHECK([for d_type in struct dirent], my_cv_struct_d_type,
[AC_TRY_COMPILE([#include <sys/types.h>
#include <dirent.h>], [struct dirent d; d.d_type;],
my_cv_struct_d_type=yes, my_cv_struct_d_type=no)])
if test $my_cv_struct_d_type = yes; then
  AC_DEFINE(HAVE_D_TYPE, 1, [Define if your struct direntry has d_type])
fi

AC_SEARCH_LIBS(nanosleep, posix4)
AC_SEARCH_LIBS(gethostbyname, nsl)
AC_SEARCH_LIBS(socket, socket inet)

if test "$dav" = yes; then
  dnl We require neon 0.12
  NEON_REQUIRE(0,12)

  dnl Build neon. We support a VPATH build.
  NEON_BUNDLED('${top_srcdir}/libneon', [
      NEON_NORMAL_BUILD
      NEON_XML_PARSER
  ])
  LIBS=$NEONLIBS
  DAV=dav.o
  DAV_LS=dav_ls.o
else
  NEON_BUILD_BUNDLED=no
  AC_SUBST(NEON_BUILD_BUNDLED)
  DAV=
  DAV_LS=
fi

AC_SUBST(DAV)
AC_SUBST(DAV_LS)

LIBS="$LIBS -ldl -lpthread"

moduledir='${libdir}/avfs'

AC_SUBST(moduledir)

dnl ================================================================
dnl == Now comes the stuff that is only for preload               ==
dnl ================================================================

if test $avfscoda_build = no; then
	origlibs=$LIBS
	LIBS=
	AC_CHECK_FUNCS(lseek64 getdents64 open64 creat64 stat64 acl)
	AC_SEARCH_LIBS(socket, socket inet)
	AC_SEARCH_LIBS(dlsym, dl)
	PRELOAD_LIBS=$LIBS
	AC_SUBST(PRELOAD_LIBS)
	LIBS=$origlibs
fi

dnl ================================================================
dnl == Now comes the stuff that is only for avfscoda              ==
dnl ================================================================

install_scriptcomps=


if test $avfscoda_build = yes; then

	AC_MSG_CHECKING([kernel source directory])
	kernelsrc=
	AC_ARG_WITH(kernel,
		[  --with-kernel          Specify location of kernel source ],
		[kernelsrc="$withval"])
	
	if test -z "$kernelsrc"; then
		buildlink=/lib/modules/`uname -r`/build
		if test -e $buildlink; then
			kernelsrc=`(cd $buildlink; /bin/pwd)`
		elif test -e /usr/src/linux; then
			kernelsrc=/usr/src/linux
		else
			AC_MSG_RESULT([Not found])
			AC_MSG_ERROR([
*** Please specify the location of the kernel source with
*** the '--with-kernel=SRCDIR' option])
		fi
	fi
	AC_MSG_RESULT([$kernelsrc])
	AC_MSG_CHECKING([kernel source version])

	origlibs=$LIBS
	LIBS=""
	kernsrcver=`AC_TRY_RUN([
	#include "$kernelsrc/include/linux/version.h"
	#include <stdio.h>
	
	int main() {
	printf("%s\n", UTS_RELEASE);
		return 0;
	}
	], , , true)`
	
	if test -z "$kernsrcver"; then
		AC_MSG_RESULT([Not found])
		AC_MSG_ERROR([
*** Cannot determine the version of the linux kernel source. Please 
*** configure the kernel before running this script])
	fi
	LIBS=$origlibs
	AC_MSG_RESULT([$kernsrcver])

	KERNINCLUDE=${kernelsrc}/include
	AC_SUBST(KERNINCLUDE)

	kmoduledir=/lib/modules/${kernsrcver}/misc
	AC_SUBST(kmoduledir)

	initstyle=
	AC_MSG_CHECKING([for init-script style])
	if test -d /sbin/init.d -a -f /etc/rc.config; then
		initstyle=suse
	elif test -f /etc/rc.d/init.d/functions; then
		initstyle=redhat
        elif test -d /etc/rc2.d; then
		initstyle=debian
	else
		initstyle=generic
	fi;
	AC_MSG_RESULT([$initstyle])

	rcdir=
	rcscriptdir=
	start_levels=
	stop_levels=
	start_prio=
	stop_prio=

	install_scriptcomps="$install_scriptcomps install_initscript"

	if test "$initstyle" = redhat; then
		install_scriptcomps="$install_scriptcomps install_scriptlinks"
		rcdir=/etc/rc.d
		rcscriptdir=init.d
		start_levels="2 3 4 5"
		stop_levels="0 1 6"
		start_prio=85
		stop_prio=25
	elif test "$initstyle" = suse; then
		install_scriptcomps="$install_scriptcomps install_scriptlinks"
		rcdir=/sbin/init.d
		rcscriptdir=
		start_levels="2 3"
		stop_levels="2 3"
		start_prio=20
		stop_prio=20
	elif test "$initstyle" = debian; then
		install_scriptcomps="$install_scriptcomps install_scriptlinks"
		rcdir=/etc
		rcscriptdir=init.d
		start_levels="2 3 4 5"
		stop_levels="0 1 6"
		start_prio=85
		stop_prio=25
	else
		rcdir=/etc/rc.d
		rcscriptdir=
	fi

	AC_SUBST(initstyle)
	AC_SUBST(rcdir)
	AC_SUBST(rcscriptdir)
	AC_SUBST(start_levels)
	AC_SUBST(stop_levels)
	AC_SUBST(start_prio)
	AC_SUBST(stop_prio)

	profiledir=
	if test "$newredir" = no; then
		AC_MSG_CHECKING([for profile directory])
		install_scriptcomps="$install_scriptcomps install_profilescripts"
		if test -d /etc/profile.d; then
			profiledir=/etc/profile.d
		else 
			profiledir=/etc
		fi
		AC_MSG_RESULT([$profiledir])
	fi
	AC_SUBST(profiledir)

	install_scriptcomps="$install_scriptcomps install_avfscodamisc"
fi

AC_SUBST(install_scriptcomps)
AC_SUBST(avfscoda_build)
AC_SUBST(preload_build)

AC_OUTPUT(src/Makefile modules/Makefile zlib/Makefile bzlib/Makefile lib/Makefile include/Makefile avfscoda/Makefile avfscoda/redir/Makefile preload/Makefile libneon/Makefile extfs/Makefile scripts/Makefile test/Makefile)
